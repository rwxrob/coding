= Coding from the Get Go
Learn practical computer science and programming with Go as a first language

This is the current running notes from the livestream sessions learning practical computer science and programming with Go as a first language.

== Go get the tools

- Install an editor: Vim, Neovim, VS Code, Goland, Container
- Install Go:
  - `brew install golang`
  - `sudo apt get golang`, `
  - `winget install --id golang.go`
- Upgrade to latest Go: `go get go`
- Install Go tools (`:GoInstallBinaries`, VS Code extension)
- Get a GitHub account
- Get `git` and `gh`:
  - `brew install git gh`
  - `sudo apt install git gh`
  - `winget install --id git.git`, `winget install --id github.cli`
- Authenticate to GitHub: `gh auth login`
- Create GitHub repo:
  - `mkdir -p ~/Repos/github.com/youraccount`
  - `cd ~/Repos/github.com/youraccount`
  - `gh repo create learn-golang --private --clone`
  - `git branch -m main`
  - `git push -u origin main`

== Hello friend
:tags: module, package, main, func, print, println, fmt.Print, fmt.Println, fmt.Printf, block, parameter, argument, variable, stdout, stderr, go-run, %v, %b, string, number, boolean, type, semicolon-insertion, go-mod-init, import, double-quote, backtick-quote, single-quote

[source,go]
----
include::cmd/hello/main.go[]
----

- Add code to git: `git add .`
- Commit code to git: `git commit -m 'some comment'`
- Push code to GitHub: `git push`
- Check code on GitHub: `gh repo view --web`

== Hi there
:tags: variable, constant, type, primitive, slice, array, map, struct, scope, var, assignment, walrus-operator, block, subroutine, procedure, func, null, nil, identifier, blank-identifier fmt.Sprintf, function, scope, caller, paradigm, operator, operand, go-test, TDD, test-driven-development, _test.go, example-based-tests

- Block - anything within curly brackets
- Subroutine - any collection of steps or instructions within a block
- Procedure - specifically a collection of instructions in a subroutine
- Function - internal calculation with a specific output return value (like math)
- Scope - how visible a thing is to other things
- Caller - the thing that called the other thing
- Paradigm - how to look at the world
- Operator - performs some action on one or more operands
- Operand - involved in the the action of an operator

== Get organized
:tags: module, package, file, go.mod, pkg, cmd, README.adoc, comment, markdown, asciidoc, godoc, adoc

- Package is the current directory name
- All `.go` files in directory as as if they were all in a single file
- Unit test files have `_test.go` (but more on that later)
- By convention, `main.go` contains `func main()` (also `package main`)
- All packages are either _commands_ or _libraries_
- Put library packages into `pkg`
- Put command packages into `cmd`
- A _module_ contains one or more packages
- Keep `go.mod` (which identifies the top of the _module_) at the root
- Regularly use `go mod tidy` to remove unused module dependencies
- Commit `go.mod` and `go.sum` in your GitHub repos
- Make sure command packages have good names
- Build binaries in same directory with `go build`
- Build binary with specific name with `go build -o hello`
- Install into `GOBIN` (in `PATH`) with `go install`
- Use `type hello` to see what is being run
- Use `hash -r` to reset to latest install
- Note that `go install` required full path to file `go install ./cmd/hello`
- Go is an _explicitly_ compiled language (like C)
- Comment a single line with `//`
- Comment multiple lines with `/* */`
- Create same-named file with `_test` for unit tests
- Add `// Output:` comment followed by expected output as `//` comment
- Run `go test` to check example-based unit test
- Learn basic Markdown
- Consider learning AsciiDoc

== Calculator

== Terminal colors
:tags: color, ansi, escape, terminal, tty, package, import

== Nyan cat

== How the world turns

== Magic eight ball

== Guess my number
:tag: term.Prompt

== Bridgekeeper

== FizzBuzz

== Arrrgs

== Binary counter

== ASCII table

== Dice roll
:tags: string, strings.Join, embed.FS

== Lights
:tags: string, strings.Join

== Simon
:tags: timer

== Madforms
:tags: structured-data, json, yaml, jq, yq, types, strings, numbers, booleans, arrays, maps, null, nil, directory

== Quiz game
:string: string, match, regular-expressions, regex

== Embedded text adventure

- `panic`
- `defer`
- save game/cache
- goroutines
- `go test -race`

== Bonzai branch

- `Exec`

== Bonzai completer

- `Testing.T`
- `ExampleTest`

== Bonzai persister

== Knowledge manager

== HTTP routeable server

== Serve HTTP REST endpoing

== Fetch JSON endpoint

== Pokeapi

== Websocket subscribe

== Link

== Scrap and walk HTML

== `dtime` domain language

- domain-specific languages
- rooted node trees
- abstract syntax trees
- Walk

== Descent into parsing

== Resume generator

== Static site generator

== What's next...

- Database clients
- Middleware
- Tview/Tcell
- Charmbracelet libraries
- Cobra
- SecureShell
- Encryption
- Protobuf
- gRPC
